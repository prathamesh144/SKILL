{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 49,
   "metadata": {},
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "import seaborn as sns\n",
    "import numpy as np\n",
    "from IPython.display import display"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Data preprocessing"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 50,
   "metadata": {},
   "outputs": [],
   "source": [
    "data=pd.read_csv('heart.csv')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 51,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 1025 entries, 0 to 1024\n",
      "Data columns (total 14 columns):\n",
      " #   Column    Non-Null Count  Dtype  \n",
      "---  ------    --------------  -----  \n",
      " 0   age       1025 non-null   int64  \n",
      " 1   sex       1025 non-null   int64  \n",
      " 2   cp        1025 non-null   int64  \n",
      " 3   trestbps  1025 non-null   int64  \n",
      " 4   chol      1025 non-null   int64  \n",
      " 5   fbs       1025 non-null   int64  \n",
      " 6   restecg   1025 non-null   int64  \n",
      " 7   thalach   1025 non-null   int64  \n",
      " 8   exang     1025 non-null   int64  \n",
      " 9   oldpeak   1025 non-null   float64\n",
      " 10  slope     1025 non-null   int64  \n",
      " 11  ca        1025 non-null   int64  \n",
      " 12  thal      1025 non-null   int64  \n",
      " 13  target    1025 non-null   int64  \n",
      "dtypes: float64(1), int64(13)\n",
      "memory usage: 112.2 KB\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "None"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>age</th>\n",
       "      <th>sex</th>\n",
       "      <th>cp</th>\n",
       "      <th>trestbps</th>\n",
       "      <th>chol</th>\n",
       "      <th>fbs</th>\n",
       "      <th>restecg</th>\n",
       "      <th>thalach</th>\n",
       "      <th>exang</th>\n",
       "      <th>oldpeak</th>\n",
       "      <th>slope</th>\n",
       "      <th>ca</th>\n",
       "      <th>thal</th>\n",
       "      <th>target</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>count</th>\n",
       "      <td>1025.000000</td>\n",
       "      <td>1025.000000</td>\n",
       "      <td>1025.000000</td>\n",
       "      <td>1025.000000</td>\n",
       "      <td>1025.00000</td>\n",
       "      <td>1025.000000</td>\n",
       "      <td>1025.000000</td>\n",
       "      <td>1025.000000</td>\n",
       "      <td>1025.000000</td>\n",
       "      <td>1025.000000</td>\n",
       "      <td>1025.000000</td>\n",
       "      <td>1025.000000</td>\n",
       "      <td>1025.000000</td>\n",
       "      <td>1025.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>mean</th>\n",
       "      <td>54.434146</td>\n",
       "      <td>0.695610</td>\n",
       "      <td>0.942439</td>\n",
       "      <td>131.611707</td>\n",
       "      <td>246.00000</td>\n",
       "      <td>0.149268</td>\n",
       "      <td>0.529756</td>\n",
       "      <td>149.114146</td>\n",
       "      <td>0.336585</td>\n",
       "      <td>1.071512</td>\n",
       "      <td>1.385366</td>\n",
       "      <td>0.754146</td>\n",
       "      <td>2.323902</td>\n",
       "      <td>0.513171</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>std</th>\n",
       "      <td>9.072290</td>\n",
       "      <td>0.460373</td>\n",
       "      <td>1.029641</td>\n",
       "      <td>17.516718</td>\n",
       "      <td>51.59251</td>\n",
       "      <td>0.356527</td>\n",
       "      <td>0.527878</td>\n",
       "      <td>23.005724</td>\n",
       "      <td>0.472772</td>\n",
       "      <td>1.175053</td>\n",
       "      <td>0.617755</td>\n",
       "      <td>1.030798</td>\n",
       "      <td>0.620660</td>\n",
       "      <td>0.500070</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>min</th>\n",
       "      <td>29.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>94.000000</td>\n",
       "      <td>126.00000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>71.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25%</th>\n",
       "      <td>48.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>120.000000</td>\n",
       "      <td>211.00000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>132.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>2.000000</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>50%</th>\n",
       "      <td>56.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>130.000000</td>\n",
       "      <td>240.00000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>152.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.800000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>2.000000</td>\n",
       "      <td>1.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>75%</th>\n",
       "      <td>61.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>2.000000</td>\n",
       "      <td>140.000000</td>\n",
       "      <td>275.00000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>166.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.800000</td>\n",
       "      <td>2.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>3.000000</td>\n",
       "      <td>1.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>max</th>\n",
       "      <td>77.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>3.000000</td>\n",
       "      <td>200.000000</td>\n",
       "      <td>564.00000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>2.000000</td>\n",
       "      <td>202.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>6.200000</td>\n",
       "      <td>2.000000</td>\n",
       "      <td>4.000000</td>\n",
       "      <td>3.000000</td>\n",
       "      <td>1.000000</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "               age          sex           cp     trestbps        chol  \\\n",
       "count  1025.000000  1025.000000  1025.000000  1025.000000  1025.00000   \n",
       "mean     54.434146     0.695610     0.942439   131.611707   246.00000   \n",
       "std       9.072290     0.460373     1.029641    17.516718    51.59251   \n",
       "min      29.000000     0.000000     0.000000    94.000000   126.00000   \n",
       "25%      48.000000     0.000000     0.000000   120.000000   211.00000   \n",
       "50%      56.000000     1.000000     1.000000   130.000000   240.00000   \n",
       "75%      61.000000     1.000000     2.000000   140.000000   275.00000   \n",
       "max      77.000000     1.000000     3.000000   200.000000   564.00000   \n",
       "\n",
       "               fbs      restecg      thalach        exang      oldpeak  \\\n",
       "count  1025.000000  1025.000000  1025.000000  1025.000000  1025.000000   \n",
       "mean      0.149268     0.529756   149.114146     0.336585     1.071512   \n",
       "std       0.356527     0.527878    23.005724     0.472772     1.175053   \n",
       "min       0.000000     0.000000    71.000000     0.000000     0.000000   \n",
       "25%       0.000000     0.000000   132.000000     0.000000     0.000000   \n",
       "50%       0.000000     1.000000   152.000000     0.000000     0.800000   \n",
       "75%       0.000000     1.000000   166.000000     1.000000     1.800000   \n",
       "max       1.000000     2.000000   202.000000     1.000000     6.200000   \n",
       "\n",
       "             slope           ca         thal       target  \n",
       "count  1025.000000  1025.000000  1025.000000  1025.000000  \n",
       "mean      1.385366     0.754146     2.323902     0.513171  \n",
       "std       0.617755     1.030798     0.620660     0.500070  \n",
       "min       0.000000     0.000000     0.000000     0.000000  \n",
       "25%       1.000000     0.000000     2.000000     0.000000  \n",
       "50%       1.000000     0.000000     2.000000     1.000000  \n",
       "75%       2.000000     1.000000     3.000000     1.000000  \n",
       "max       2.000000     4.000000     3.000000     1.000000  "
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/plain": [
       "(1025, 14)"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/plain": [
       "14350"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>age</th>\n",
       "      <th>sex</th>\n",
       "      <th>cp</th>\n",
       "      <th>trestbps</th>\n",
       "      <th>chol</th>\n",
       "      <th>fbs</th>\n",
       "      <th>restecg</th>\n",
       "      <th>thalach</th>\n",
       "      <th>exang</th>\n",
       "      <th>oldpeak</th>\n",
       "      <th>slope</th>\n",
       "      <th>ca</th>\n",
       "      <th>thal</th>\n",
       "      <th>target</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>52</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>125</td>\n",
       "      <td>212</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>168</td>\n",
       "      <td>0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>3</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>53</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>140</td>\n",
       "      <td>203</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>155</td>\n",
       "      <td>1</td>\n",
       "      <td>3.1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>70</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>145</td>\n",
       "      <td>174</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>125</td>\n",
       "      <td>1</td>\n",
       "      <td>2.6</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>61</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>148</td>\n",
       "      <td>203</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>161</td>\n",
       "      <td>0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>3</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>62</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>138</td>\n",
       "      <td>294</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>106</td>\n",
       "      <td>0</td>\n",
       "      <td>1.9</td>\n",
       "      <td>1</td>\n",
       "      <td>3</td>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   age  sex  cp  trestbps  chol  fbs  restecg  thalach  exang  oldpeak  slope  \\\n",
       "0   52    1   0       125   212    0        1      168      0      1.0      2   \n",
       "1   53    1   0       140   203    1        0      155      1      3.1      0   \n",
       "2   70    1   0       145   174    0        1      125      1      2.6      0   \n",
       "3   61    1   0       148   203    0        1      161      0      0.0      2   \n",
       "4   62    0   0       138   294    1        1      106      0      1.9      1   \n",
       "\n",
       "   ca  thal  target  \n",
       "0   2     3       0  \n",
       "1   0     3       0  \n",
       "2   0     3       0  \n",
       "3   1     3       0  \n",
       "4   3     2       0  "
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "display(data.info(),\n",
    "        data.describe(),\n",
    "        data.shape,\n",
    "        data.size,\n",
    "        data.head()\n",
    "        )"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 52,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "NAN\n",
      "Series([], dtype: int64)\n",
      "\n",
      "NULL\n",
      "Series([], dtype: int64)\n"
     ]
    }
   ],
   "source": [
    "print(\"NAN\")\n",
    "nan_counts = data.isna().sum()\n",
    "print(nan_counts[nan_counts > 0])\n",
    "\n",
    "print(\"\\nNULL\")\n",
    "null_counts = data.isnull().sum()\n",
    "print(null_counts[null_counts > 0])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 53,
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.preprocessing import StandardScaler\n",
    "def scalling(data):\n",
    "    numeric_data = data.select_dtypes(include=['float64', 'int64'])\n",
    "    scaler = StandardScaler()\n",
    "    scaled_data = scaler.fit_transform(numeric_data)\n",
    "    scaled_df = pd.DataFrame(scaled_data, columns=numeric_data.columns)\n",
    "    return scaled_df"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 54,
   "metadata": {},
   "outputs": [],
   "source": [
    "scalled_data=scalling(data)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 55,
   "metadata": {},
   "outputs": [],
   "source": [
    "x=data.iloc[:,:-1]\n",
    "y=data.iloc[:,-1]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 56,
   "metadata": {},
   "outputs": [],
   "source": [
    "scalled_x=scalled_data.iloc[:,:-1]\n",
    "scalled_y=scalled_data.iloc[:,-1]"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Feature selection"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Filter Method\n",
    "- it considers each feature independently\n",
    "- less computationally expensive"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Variance Threshold\n",
    "- removes feature with low variance \n",
    "- assumes that high variance = more info"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 57,
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.feature_selection import VarianceThreshold\n",
    "def varience(data):\n",
    "\n",
    "    numeric_data = data.select_dtypes(include=['float64', 'int64'])\n",
    "    selector = VarianceThreshold(threshold=0.2)\n",
    "\n",
    "    selected_data = selector.fit_transform(data)\n",
    "\n",
    "    selected_features = numeric_data.columns[selector.get_support()]\n",
    "\n",
    "    features_removed = [col for col in numeric_data.columns if col not in selected_features]\n",
    "\n",
    "\n",
    "    print(f\"Original features: {numeric_data.shape[1]}\")\n",
    "    print(f\"Features after variance thresholding: {selected_data.shape[1]}\")\n",
    "    print(f\"Features removed: {numeric_data.shape[1] - selected_data.shape[1]}\")\n",
    "    print(\"\\nSelected features:\")\n",
    "    print(selected_features.tolist())\n",
    "    print(\"\\nremoved features:\")\n",
    "    print(features_removed)\n",
    "    final_data = data[selected_features]\n",
    "    return final_data"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 58,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Original features: 14\n",
      "Features after variance thresholding: 14\n",
      "Features removed: 0\n",
      "\n",
      "Selected features:\n",
      "['age', 'sex', 'cp', 'trestbps', 'chol', 'fbs', 'restecg', 'thalach', 'exang', 'oldpeak', 'slope', 'ca', 'thal', 'target']\n",
      "\n",
      "removed features:\n",
      "[]\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>age</th>\n",
       "      <th>sex</th>\n",
       "      <th>cp</th>\n",
       "      <th>trestbps</th>\n",
       "      <th>chol</th>\n",
       "      <th>fbs</th>\n",
       "      <th>restecg</th>\n",
       "      <th>thalach</th>\n",
       "      <th>exang</th>\n",
       "      <th>oldpeak</th>\n",
       "      <th>slope</th>\n",
       "      <th>ca</th>\n",
       "      <th>thal</th>\n",
       "      <th>target</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>-0.268437</td>\n",
       "      <td>0.661504</td>\n",
       "      <td>-0.915755</td>\n",
       "      <td>-0.377636</td>\n",
       "      <td>-0.659332</td>\n",
       "      <td>-0.418878</td>\n",
       "      <td>0.891255</td>\n",
       "      <td>0.821321</td>\n",
       "      <td>-0.712287</td>\n",
       "      <td>-0.060888</td>\n",
       "      <td>0.995433</td>\n",
       "      <td>1.209221</td>\n",
       "      <td>1.089852</td>\n",
       "      <td>-1.026698</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>-0.158157</td>\n",
       "      <td>0.661504</td>\n",
       "      <td>-0.915755</td>\n",
       "      <td>0.479107</td>\n",
       "      <td>-0.833861</td>\n",
       "      <td>2.387330</td>\n",
       "      <td>-1.004049</td>\n",
       "      <td>0.255968</td>\n",
       "      <td>1.403928</td>\n",
       "      <td>1.727137</td>\n",
       "      <td>-2.243675</td>\n",
       "      <td>-0.731971</td>\n",
       "      <td>1.089852</td>\n",
       "      <td>-1.026698</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>1.716595</td>\n",
       "      <td>0.661504</td>\n",
       "      <td>-0.915755</td>\n",
       "      <td>0.764688</td>\n",
       "      <td>-1.396233</td>\n",
       "      <td>-0.418878</td>\n",
       "      <td>0.891255</td>\n",
       "      <td>-1.048692</td>\n",
       "      <td>1.403928</td>\n",
       "      <td>1.301417</td>\n",
       "      <td>-2.243675</td>\n",
       "      <td>-0.731971</td>\n",
       "      <td>1.089852</td>\n",
       "      <td>-1.026698</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>0.724079</td>\n",
       "      <td>0.661504</td>\n",
       "      <td>-0.915755</td>\n",
       "      <td>0.936037</td>\n",
       "      <td>-0.833861</td>\n",
       "      <td>-0.418878</td>\n",
       "      <td>0.891255</td>\n",
       "      <td>0.516900</td>\n",
       "      <td>-0.712287</td>\n",
       "      <td>-0.912329</td>\n",
       "      <td>0.995433</td>\n",
       "      <td>0.238625</td>\n",
       "      <td>1.089852</td>\n",
       "      <td>-1.026698</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>0.834359</td>\n",
       "      <td>-1.511706</td>\n",
       "      <td>-0.915755</td>\n",
       "      <td>0.364875</td>\n",
       "      <td>0.930822</td>\n",
       "      <td>2.387330</td>\n",
       "      <td>0.891255</td>\n",
       "      <td>-1.874977</td>\n",
       "      <td>-0.712287</td>\n",
       "      <td>0.705408</td>\n",
       "      <td>-0.624121</td>\n",
       "      <td>2.179817</td>\n",
       "      <td>-0.522122</td>\n",
       "      <td>-1.026698</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1020</th>\n",
       "      <td>0.503520</td>\n",
       "      <td>0.661504</td>\n",
       "      <td>0.055931</td>\n",
       "      <td>0.479107</td>\n",
       "      <td>-0.484803</td>\n",
       "      <td>-0.418878</td>\n",
       "      <td>0.891255</td>\n",
       "      <td>0.647366</td>\n",
       "      <td>1.403928</td>\n",
       "      <td>-0.912329</td>\n",
       "      <td>0.995433</td>\n",
       "      <td>-0.731971</td>\n",
       "      <td>-0.522122</td>\n",
       "      <td>0.973997</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1021</th>\n",
       "      <td>0.613800</td>\n",
       "      <td>0.661504</td>\n",
       "      <td>-0.915755</td>\n",
       "      <td>-0.377636</td>\n",
       "      <td>0.232705</td>\n",
       "      <td>-0.418878</td>\n",
       "      <td>-1.004049</td>\n",
       "      <td>-0.352873</td>\n",
       "      <td>1.403928</td>\n",
       "      <td>1.471705</td>\n",
       "      <td>-0.624121</td>\n",
       "      <td>0.238625</td>\n",
       "      <td>1.089852</td>\n",
       "      <td>-1.026698</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1022</th>\n",
       "      <td>-0.819834</td>\n",
       "      <td>0.661504</td>\n",
       "      <td>-0.915755</td>\n",
       "      <td>-1.234378</td>\n",
       "      <td>0.562371</td>\n",
       "      <td>-0.418878</td>\n",
       "      <td>-1.004049</td>\n",
       "      <td>-1.353113</td>\n",
       "      <td>1.403928</td>\n",
       "      <td>-0.060888</td>\n",
       "      <td>-0.624121</td>\n",
       "      <td>0.238625</td>\n",
       "      <td>-0.522122</td>\n",
       "      <td>-1.026698</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1023</th>\n",
       "      <td>-0.488996</td>\n",
       "      <td>-1.511706</td>\n",
       "      <td>-0.915755</td>\n",
       "      <td>-1.234378</td>\n",
       "      <td>0.155137</td>\n",
       "      <td>-0.418878</td>\n",
       "      <td>-1.004049</td>\n",
       "      <td>0.429923</td>\n",
       "      <td>-0.712287</td>\n",
       "      <td>-0.912329</td>\n",
       "      <td>0.995433</td>\n",
       "      <td>-0.731971</td>\n",
       "      <td>-0.522122</td>\n",
       "      <td>0.973997</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1024</th>\n",
       "      <td>-0.047877</td>\n",
       "      <td>0.661504</td>\n",
       "      <td>-0.915755</td>\n",
       "      <td>-0.663216</td>\n",
       "      <td>-1.124743</td>\n",
       "      <td>-0.418878</td>\n",
       "      <td>0.891255</td>\n",
       "      <td>-1.570556</td>\n",
       "      <td>-0.712287</td>\n",
       "      <td>0.279688</td>\n",
       "      <td>-0.624121</td>\n",
       "      <td>0.238625</td>\n",
       "      <td>1.089852</td>\n",
       "      <td>-1.026698</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>1025 rows × 14 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "           age       sex        cp  trestbps      chol       fbs   restecg  \\\n",
       "0    -0.268437  0.661504 -0.915755 -0.377636 -0.659332 -0.418878  0.891255   \n",
       "1    -0.158157  0.661504 -0.915755  0.479107 -0.833861  2.387330 -1.004049   \n",
       "2     1.716595  0.661504 -0.915755  0.764688 -1.396233 -0.418878  0.891255   \n",
       "3     0.724079  0.661504 -0.915755  0.936037 -0.833861 -0.418878  0.891255   \n",
       "4     0.834359 -1.511706 -0.915755  0.364875  0.930822  2.387330  0.891255   \n",
       "...        ...       ...       ...       ...       ...       ...       ...   \n",
       "1020  0.503520  0.661504  0.055931  0.479107 -0.484803 -0.418878  0.891255   \n",
       "1021  0.613800  0.661504 -0.915755 -0.377636  0.232705 -0.418878 -1.004049   \n",
       "1022 -0.819834  0.661504 -0.915755 -1.234378  0.562371 -0.418878 -1.004049   \n",
       "1023 -0.488996 -1.511706 -0.915755 -1.234378  0.155137 -0.418878 -1.004049   \n",
       "1024 -0.047877  0.661504 -0.915755 -0.663216 -1.124743 -0.418878  0.891255   \n",
       "\n",
       "       thalach     exang   oldpeak     slope        ca      thal    target  \n",
       "0     0.821321 -0.712287 -0.060888  0.995433  1.209221  1.089852 -1.026698  \n",
       "1     0.255968  1.403928  1.727137 -2.243675 -0.731971  1.089852 -1.026698  \n",
       "2    -1.048692  1.403928  1.301417 -2.243675 -0.731971  1.089852 -1.026698  \n",
       "3     0.516900 -0.712287 -0.912329  0.995433  0.238625  1.089852 -1.026698  \n",
       "4    -1.874977 -0.712287  0.705408 -0.624121  2.179817 -0.522122 -1.026698  \n",
       "...        ...       ...       ...       ...       ...       ...       ...  \n",
       "1020  0.647366  1.403928 -0.912329  0.995433 -0.731971 -0.522122  0.973997  \n",
       "1021 -0.352873  1.403928  1.471705 -0.624121  0.238625  1.089852 -1.026698  \n",
       "1022 -1.353113  1.403928 -0.060888 -0.624121  0.238625 -0.522122 -1.026698  \n",
       "1023  0.429923 -0.712287 -0.912329  0.995433 -0.731971 -0.522122  0.973997  \n",
       "1024 -1.570556 -0.712287  0.279688 -0.624121  0.238625  1.089852 -1.026698  \n",
       "\n",
       "[1025 rows x 14 columns]"
      ]
     },
     "execution_count": 58,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "scaled=scalling(data)\n",
    "varience(scaled)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Correaltion-based selection\n",
    "- removes hig corr features as tehy likely provide redundant info"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 59,
   "metadata": {},
   "outputs": [],
   "source": [
    "def corr(data):\n",
    "    numeric_data = data.select_dtypes(include=['float64', 'int64'])\n",
    "    \n",
    "    corr_matrix = pd.DataFrame(numeric_data).corr().abs()\n",
    "\n",
    "    upper = corr_matrix.where(np.triu(np.ones(corr_matrix.shape), k=1).astype(bool))\n",
    "\n",
    "    to_drop = [column for column in upper.columns if any(upper[column] > 0.8)]\n",
    "    print(to_drop)\n",
    "    data_selected = pd.DataFrame(data).drop(to_drop, axis=1)\n",
    "\n",
    "    return data_selected"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 60,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[]\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>age</th>\n",
       "      <th>sex</th>\n",
       "      <th>cp</th>\n",
       "      <th>trestbps</th>\n",
       "      <th>chol</th>\n",
       "      <th>fbs</th>\n",
       "      <th>restecg</th>\n",
       "      <th>thalach</th>\n",
       "      <th>exang</th>\n",
       "      <th>oldpeak</th>\n",
       "      <th>slope</th>\n",
       "      <th>ca</th>\n",
       "      <th>thal</th>\n",
       "      <th>target</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>-0.268437</td>\n",
       "      <td>0.661504</td>\n",
       "      <td>-0.915755</td>\n",
       "      <td>-0.377636</td>\n",
       "      <td>-0.659332</td>\n",
       "      <td>-0.418878</td>\n",
       "      <td>0.891255</td>\n",
       "      <td>0.821321</td>\n",
       "      <td>-0.712287</td>\n",
       "      <td>-0.060888</td>\n",
       "      <td>0.995433</td>\n",
       "      <td>1.209221</td>\n",
       "      <td>1.089852</td>\n",
       "      <td>-1.026698</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>-0.158157</td>\n",
       "      <td>0.661504</td>\n",
       "      <td>-0.915755</td>\n",
       "      <td>0.479107</td>\n",
       "      <td>-0.833861</td>\n",
       "      <td>2.387330</td>\n",
       "      <td>-1.004049</td>\n",
       "      <td>0.255968</td>\n",
       "      <td>1.403928</td>\n",
       "      <td>1.727137</td>\n",
       "      <td>-2.243675</td>\n",
       "      <td>-0.731971</td>\n",
       "      <td>1.089852</td>\n",
       "      <td>-1.026698</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>1.716595</td>\n",
       "      <td>0.661504</td>\n",
       "      <td>-0.915755</td>\n",
       "      <td>0.764688</td>\n",
       "      <td>-1.396233</td>\n",
       "      <td>-0.418878</td>\n",
       "      <td>0.891255</td>\n",
       "      <td>-1.048692</td>\n",
       "      <td>1.403928</td>\n",
       "      <td>1.301417</td>\n",
       "      <td>-2.243675</td>\n",
       "      <td>-0.731971</td>\n",
       "      <td>1.089852</td>\n",
       "      <td>-1.026698</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>0.724079</td>\n",
       "      <td>0.661504</td>\n",
       "      <td>-0.915755</td>\n",
       "      <td>0.936037</td>\n",
       "      <td>-0.833861</td>\n",
       "      <td>-0.418878</td>\n",
       "      <td>0.891255</td>\n",
       "      <td>0.516900</td>\n",
       "      <td>-0.712287</td>\n",
       "      <td>-0.912329</td>\n",
       "      <td>0.995433</td>\n",
       "      <td>0.238625</td>\n",
       "      <td>1.089852</td>\n",
       "      <td>-1.026698</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>0.834359</td>\n",
       "      <td>-1.511706</td>\n",
       "      <td>-0.915755</td>\n",
       "      <td>0.364875</td>\n",
       "      <td>0.930822</td>\n",
       "      <td>2.387330</td>\n",
       "      <td>0.891255</td>\n",
       "      <td>-1.874977</td>\n",
       "      <td>-0.712287</td>\n",
       "      <td>0.705408</td>\n",
       "      <td>-0.624121</td>\n",
       "      <td>2.179817</td>\n",
       "      <td>-0.522122</td>\n",
       "      <td>-1.026698</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1020</th>\n",
       "      <td>0.503520</td>\n",
       "      <td>0.661504</td>\n",
       "      <td>0.055931</td>\n",
       "      <td>0.479107</td>\n",
       "      <td>-0.484803</td>\n",
       "      <td>-0.418878</td>\n",
       "      <td>0.891255</td>\n",
       "      <td>0.647366</td>\n",
       "      <td>1.403928</td>\n",
       "      <td>-0.912329</td>\n",
       "      <td>0.995433</td>\n",
       "      <td>-0.731971</td>\n",
       "      <td>-0.522122</td>\n",
       "      <td>0.973997</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1021</th>\n",
       "      <td>0.613800</td>\n",
       "      <td>0.661504</td>\n",
       "      <td>-0.915755</td>\n",
       "      <td>-0.377636</td>\n",
       "      <td>0.232705</td>\n",
       "      <td>-0.418878</td>\n",
       "      <td>-1.004049</td>\n",
       "      <td>-0.352873</td>\n",
       "      <td>1.403928</td>\n",
       "      <td>1.471705</td>\n",
       "      <td>-0.624121</td>\n",
       "      <td>0.238625</td>\n",
       "      <td>1.089852</td>\n",
       "      <td>-1.026698</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1022</th>\n",
       "      <td>-0.819834</td>\n",
       "      <td>0.661504</td>\n",
       "      <td>-0.915755</td>\n",
       "      <td>-1.234378</td>\n",
       "      <td>0.562371</td>\n",
       "      <td>-0.418878</td>\n",
       "      <td>-1.004049</td>\n",
       "      <td>-1.353113</td>\n",
       "      <td>1.403928</td>\n",
       "      <td>-0.060888</td>\n",
       "      <td>-0.624121</td>\n",
       "      <td>0.238625</td>\n",
       "      <td>-0.522122</td>\n",
       "      <td>-1.026698</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1023</th>\n",
       "      <td>-0.488996</td>\n",
       "      <td>-1.511706</td>\n",
       "      <td>-0.915755</td>\n",
       "      <td>-1.234378</td>\n",
       "      <td>0.155137</td>\n",
       "      <td>-0.418878</td>\n",
       "      <td>-1.004049</td>\n",
       "      <td>0.429923</td>\n",
       "      <td>-0.712287</td>\n",
       "      <td>-0.912329</td>\n",
       "      <td>0.995433</td>\n",
       "      <td>-0.731971</td>\n",
       "      <td>-0.522122</td>\n",
       "      <td>0.973997</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1024</th>\n",
       "      <td>-0.047877</td>\n",
       "      <td>0.661504</td>\n",
       "      <td>-0.915755</td>\n",
       "      <td>-0.663216</td>\n",
       "      <td>-1.124743</td>\n",
       "      <td>-0.418878</td>\n",
       "      <td>0.891255</td>\n",
       "      <td>-1.570556</td>\n",
       "      <td>-0.712287</td>\n",
       "      <td>0.279688</td>\n",
       "      <td>-0.624121</td>\n",
       "      <td>0.238625</td>\n",
       "      <td>1.089852</td>\n",
       "      <td>-1.026698</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>1025 rows × 14 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "           age       sex        cp  trestbps      chol       fbs   restecg  \\\n",
       "0    -0.268437  0.661504 -0.915755 -0.377636 -0.659332 -0.418878  0.891255   \n",
       "1    -0.158157  0.661504 -0.915755  0.479107 -0.833861  2.387330 -1.004049   \n",
       "2     1.716595  0.661504 -0.915755  0.764688 -1.396233 -0.418878  0.891255   \n",
       "3     0.724079  0.661504 -0.915755  0.936037 -0.833861 -0.418878  0.891255   \n",
       "4     0.834359 -1.511706 -0.915755  0.364875  0.930822  2.387330  0.891255   \n",
       "...        ...       ...       ...       ...       ...       ...       ...   \n",
       "1020  0.503520  0.661504  0.055931  0.479107 -0.484803 -0.418878  0.891255   \n",
       "1021  0.613800  0.661504 -0.915755 -0.377636  0.232705 -0.418878 -1.004049   \n",
       "1022 -0.819834  0.661504 -0.915755 -1.234378  0.562371 -0.418878 -1.004049   \n",
       "1023 -0.488996 -1.511706 -0.915755 -1.234378  0.155137 -0.418878 -1.004049   \n",
       "1024 -0.047877  0.661504 -0.915755 -0.663216 -1.124743 -0.418878  0.891255   \n",
       "\n",
       "       thalach     exang   oldpeak     slope        ca      thal    target  \n",
       "0     0.821321 -0.712287 -0.060888  0.995433  1.209221  1.089852 -1.026698  \n",
       "1     0.255968  1.403928  1.727137 -2.243675 -0.731971  1.089852 -1.026698  \n",
       "2    -1.048692  1.403928  1.301417 -2.243675 -0.731971  1.089852 -1.026698  \n",
       "3     0.516900 -0.712287 -0.912329  0.995433  0.238625  1.089852 -1.026698  \n",
       "4    -1.874977 -0.712287  0.705408 -0.624121  2.179817 -0.522122 -1.026698  \n",
       "...        ...       ...       ...       ...       ...       ...       ...  \n",
       "1020  0.647366  1.403928 -0.912329  0.995433 -0.731971 -0.522122  0.973997  \n",
       "1021 -0.352873  1.403928  1.471705 -0.624121  0.238625  1.089852 -1.026698  \n",
       "1022 -1.353113  1.403928 -0.060888 -0.624121  0.238625 -0.522122 -1.026698  \n",
       "1023  0.429923 -0.712287 -0.912329  0.995433 -0.731971 -0.522122  0.973997  \n",
       "1024 -1.570556 -0.712287  0.279688 -0.624121  0.238625  1.089852 -1.026698  \n",
       "\n",
       "[1025 rows x 14 columns]"
      ]
     },
     "execution_count": 60,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "corr(scaled)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Statistical Tests\n",
    "- Uses statistical tests to select features that have the strongest relationship with the output variable."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "- p < 0.01: Very strong evidence against the null hypothesis (highly significant)\n",
    "- p < 0.05: Strong evidence against the null hypothesis (significant)\n",
    "- p < 0.10: Weak evidence against the null hypothesis (marginally significant)\n",
    "- p ≥ 0.10: Insufficient evidence against the null hypothesis (not significant)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "- F < 1: Feature likely has little predictive power\n",
    "- 1 < F < 5: Moderate predictive power\n",
    "- 5 < F < 10: Strong predictive power\n",
    "- F > 10: Very strong predictive power"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "ChiSquared Test\n",
    "- used in two categorical features"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 61,
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.feature_selection import chi2\n",
    "from sklearn.model_selection import train_test_split\n",
    "\n",
    "def chi2test(data):\n",
    "    x=data.iloc[:,:-1]\n",
    "    y=data.iloc[:,-1]\n",
    "    columns_selected= chi2(x,y)\n",
    "    p_values=pd.Series(columns_selected[1])\n",
    "    p_values.index=x.columns\n",
    "    return p_values.sort_index(ascending=False)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 62,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "trestbps     1.198287e-11\n",
       "thalach     2.224662e-143\n",
       "thal         1.074903e-05\n",
       "slope        6.516763e-09\n",
       "sex          7.934661e-07\n",
       "restecg      1.803654e-03\n",
       "oldpeak      4.149300e-57\n",
       "fbs          2.241583e-01\n",
       "exang        3.232318e-30\n",
       "cp           2.698064e-49\n",
       "chol         6.803149e-26\n",
       "ca           1.003018e-47\n",
       "age          1.820066e-19\n",
       "dtype: float64"
      ]
     },
     "execution_count": 62,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "chi2test(data)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Anova test\n",
    "- Used to check if numerical feature have significance to categorcial feature"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 63,
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.feature_selection import SelectKBest, f_classif\n",
    "def anovatest(data):\n",
    "    x=data.iloc[:,:-1]\n",
    "    y=data.iloc[:,-1]\n",
    "    xtrain,xtest,ytrain,ytest=train_test_split(x,y,test_size=0.2,random_state=1)\n",
    "    selector = SelectKBest(f_classif)\n",
    "    X_selected = selector.fit_transform(xtrain, ytrain)\n",
    "\n",
    "    f_scores = selector.scores_\n",
    "    p_values = selector.pvalues_\n",
    "\n",
    "    feature_scores = pd.DataFrame({\n",
    "    \t'Feature': xtrain.columns,\n",
    "    \t'F Score': f_scores,\n",
    "    \t'P Value': p_values\n",
    "    })\n",
    "\n",
    "    feature_scores = feature_scores.sort_values('F Score', ascending=False)\n",
    "    print(feature_scores.head(10))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 64,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "    Feature     F Score       P Value\n",
      "8     exang  203.626002  2.038245e-41\n",
      "2        cp  199.677192  1.001204e-40\n",
      "9   oldpeak  195.049727  6.517764e-40\n",
      "7   thalach  182.435869  1.125442e-37\n",
      "11       ca  131.481674  2.486529e-28\n",
      "12     thal  119.605602  4.455097e-26\n",
      "10    slope  117.018888  1.392035e-25\n",
      "1       sex   73.331123  5.397681e-17\n",
      "0       age   46.704383  1.612822e-11\n",
      "6   restecg   21.955759  3.266880e-06\n"
     ]
    }
   ],
   "source": [
    "anovatest(data)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 65,
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.feature_selection import mutual_info_classif, SelectKBest\n",
    "def mutualinfotest(data):\n",
    "\tx=data.iloc[:,:-1]\n",
    "\ty=data.iloc[:,-1]\n",
    "\txtrain,xtest,ytrain,ytest=train_test_split(x,y,test_size=0.2,random_state=1)\n",
    "\tselector = SelectKBest(mutual_info_classif, k=10)\n",
    "\tX_selected = selector.fit_transform(xtrain, ytrain)\n",
    "\n",
    "\tf_scores = selector.scores_\n",
    "\n",
    "\tfeature_scores = pd.DataFrame({\n",
    "\t    'Feature': xtrain.columns,\n",
    "\t    'F Score': f_scores,\n",
    "\t})\n",
    "\n",
    "\tfeature_scores = feature_scores.sort_values('F Score', ascending=False)\n",
    "\tprint(feature_scores.head(10))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 66,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "     Feature   F Score\n",
      "4       chol  0.234029\n",
      "7    thalach  0.169419\n",
      "12      thal  0.142713\n",
      "9    oldpeak  0.129620\n",
      "2         cp  0.128883\n",
      "8      exang  0.120294\n",
      "11        ca  0.111043\n",
      "10     slope  0.080131\n",
      "0        age  0.079242\n",
      "3   trestbps  0.040069\n"
     ]
    }
   ],
   "source": [
    "mutualinfotest(data)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Wrapper Method\n",
    "- use a predictive model to score feature subsets\n",
    "- train a new model on each feature subset and measure its performance to select the best features"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Recursive Feature Elimination (RFE)\n",
    "- Recursively removes the weakest feature(s) until the desired number of features is reached."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 67,
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.feature_selection import RFE\n",
    "from sklearn.linear_model import LogisticRegression\n",
    "\n",
    "def reftest(scalled_x,y):\n",
    "    model = LogisticRegression(max_iter=1000)\n",
    "\n",
    "\n",
    "    selector = RFE(estimator=model, n_features_to_select=10, step=1)\n",
    "    X_selected = selector.fit_transform(scalled_x,y)\n",
    "\n",
    "    selected_features = scalled_x.columns[selector.support_]\n",
    "    print(\"Selected features:\", selected_features.tolist())\n",
    "\n",
    "\n",
    "    feature_ranking = pd.DataFrame({\n",
    "        'Feature': scalled_x.columns,\n",
    "        'Ranking': selector.ranking_\n",
    "    })\n",
    "    feature_ranking = feature_ranking.sort_values('Ranking')\n",
    "    print(\"\\nFeature ranking (1 = selected, higher = eliminated earlier):\")\n",
    "    print(feature_ranking)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 68,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Selected features: ['sex', 'cp', 'trestbps', 'chol', 'thalach', 'exang', 'oldpeak', 'slope', 'ca', 'thal']\n",
      "\n",
      "Feature ranking (1 = selected, higher = eliminated earlier):\n",
      "     Feature  Ranking\n",
      "1        sex        1\n",
      "2         cp        1\n",
      "3   trestbps        1\n",
      "4       chol        1\n",
      "7    thalach        1\n",
      "10     slope        1\n",
      "9    oldpeak        1\n",
      "8      exang        1\n",
      "12      thal        1\n",
      "11        ca        1\n",
      "6    restecg        2\n",
      "0        age        3\n",
      "5        fbs        4\n"
     ]
    }
   ],
   "source": [
    "reftest(scalled_x,y)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Forward/Backward Selection\n",
    "- Forward selection starts with no features and adds them one by one, while backward selection starts with all features and removes them one by one."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 69,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "\n",
      "[2025-03-21 13:44:56] Features: 1/10 -- score: 0.18991694170523726\n",
      "[2025-03-21 13:44:56] Features: 2/10 -- score: 0.3202729761019654\n",
      "[2025-03-21 13:44:56] Features: 3/10 -- score: 0.37901379189669787\n",
      "[2025-03-21 13:44:56] Features: 4/10 -- score: 0.4231779108022288\n",
      "[2025-03-21 13:44:56] Features: 5/10 -- score: 0.4541934600545228\n",
      "[2025-03-21 13:44:56] Features: 6/10 -- score: 0.47210549907312005\n",
      "[2025-03-21 13:44:56] Features: 7/10 -- score: 0.4879756394058109\n",
      "[2025-03-21 13:44:56] Features: 8/10 -- score: 0.4932556597799903\n",
      "[2025-03-21 13:44:56] Features: 9/10 -- score: 0.49719930134170864\n",
      "[2025-03-21 13:44:56] Features: 10/10 -- score: 0.4998121001307898"
     ]
    }
   ],
   "source": [
    "from mlxtend.feature_selection import SequentialFeatureSelector as SFS\n",
    "from sklearn.linear_model import LinearRegression\n",
    "\n",
    "# Forward selection\n",
    "sfs_forward = SFS(LinearRegression(), \n",
    "                  k_features=10, \n",
    "                  forward=True, \n",
    "                  verbose=2,\n",
    "                  scoring='r2')\n",
    "sfs_forward.fit(scalled_x, y)\n",
    "X_selected = sfs_forward.transform(scalled_x)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 70,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "\n",
      "[2025-03-21 13:44:56] Features: 12/10 -- score: 0.5003891746727683\n",
      "[2025-03-21 13:44:56] Features: 11/10 -- score: 0.5004238310924107\n",
      "[2025-03-21 13:44:56] Features: 10/10 -- score: 0.4998121001307898"
     ]
    }
   ],
   "source": [
    "# Backward selection\n",
    "sfs_backward = SFS(LinearRegression(), \n",
    "                   k_features=10, \n",
    "                   forward=False, \n",
    "                   verbose=2,\n",
    "                   scoring='r2')\n",
    "sfs_backward.fit(scalled_x, y)\n",
    "X_selected = sfs_backward.transform(scalled_x)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 71,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "     Feature       Score\n",
      "9    oldpeak  243.450780\n",
      "8      exang  242.883889\n",
      "2         cp  238.558457\n",
      "7    thalach  222.799538\n",
      "11        ca  174.877078\n",
      "10     slope  138.679393\n",
      "12      thal  131.802996\n",
      "1        sex   86.689707\n",
      "0        age   56.785135\n",
      "3   trestbps   20.087353\n",
      "6    restecg   18.838205\n",
      "4       chol   10.326152\n",
      "5        fbs    1.736352\n"
     ]
    }
   ],
   "source": [
    "import pandas as pd\n",
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "\n",
    "selector = SelectKBest(f_classif, k=10)\n",
    "selector.fit(x, y)\n",
    "\n",
    "scores = selector.scores_\n",
    "feature_names = x.columns\n",
    "\n",
    "feature_scores = pd.DataFrame({'Feature': feature_names, 'Score': scores})\n",
    "feature_scores = feature_scores.sort_values('Score', ascending=False)\n",
    "\n",
    "print(feature_scores)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 77,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 1400x1000 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "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3R0dsTDGjRu3UPcH5v8tVv4hWHPNNaOtra3ewwGGgHkOzcFch+ZgrkPja+Z53tnZGY899tjwCW3b2+c/lP4vYM9/+hGMHDnyVbedPXt2cVlQLS1zLoPR9/bV3L+/ZttBoR5ynplr0NjMc2gO5jo0B3MdGl8zzvO2BVzf0oS2K6ywQnEispdeeikWX3zx4rqTTz65aJswP1md+8ADD8x13e9///viegAAAACA4WZOw9gS2GijjWLppZeOo48+umh5cPPNN8fll19enIxsfrKXbZ6k7OKLL44pU6bERRddFDfddFNxkrKh1D1iRPziyEOKSy4DAAAAADRUaJvtEc4999z4xz/+ETvttFOccMIJceihh/ZW3c7Lu9/97jjllFPisssui+23377oZfvtb387Nthgg6EdcEtLdC0xurgsdG8EAAAAAICytUdIK620UlEx29+jjz46188nnXTSXD9vt912xWUgl1xySY1HCQAAAADQJKHtcNI6a1as+fMbi+VJ228Vs1/jRGoAAAAAAMOqPcJw0zJ7drz9f+8tLrkMAAAAAFALykMj4valNoznRg+uL23HjJdihzixWL7+TVtF18j59959LT+/6N7i3wv3WW+hHgcAAAAAGN5U2gIAAAAAlIjQFgAAAACgRIS2AAAAAAAlIrQFAAAAACgRoS0AAAAAQIm013sAw9XMESPj0FOv7V0GAAAAAKgFoW2Velpb47ml31LvYQAAAAAADUZ7BAAAAACAElFpW6W2WTNj56vPK5Z/ssv+0d0+ot5DAgAAAAAagErbKrV1z4qtb/jv4pLLAAAAAAC1ILQFAAAAACgRoS0AAAAAQIkIbQEAAAAASkRoCwAAAABQIkJbAAAAAIASEdoCAAAAAJRIe70HUAZHbbdqjBkzZnB3mj07YqOHisXzVl01olX+DQAAAAAsPKFttTKkXX31eo8CAAAAAGgwykMBAAAAAEpEpW21uroiTjxxzvLhh0d0dNR7RAAAAABAAxDaVmvmzIhjj52zfMghQlsAAAAAoCa0RwAAAAAAKBGhLQAAAABAiQhtAQAAAABKRGgLAAAAAFAiQlsAAAAAgBIR2gIAAAAAlEh7vQcwbC22WMQ997yyDAAAAABQA0LbarW1Ray3Xr1HAQAAAAA0GKFtREyY/Ew82zoimsEla7293kMAAAAAAOZDaFultpldsdWlFxXLN+6xT3SP6Kj3kAAAAACABiC0rVL7zFmx+xknF8s37/ZJoS0AAAAAUBOttXkYAAAAAABqQWgLAAAAAFAiQlsAAAAAgBIR2gIAAAAAlIjQFgAAAACgRIS2AAAAAAAl0l7vAQxXXSNHxgkXXNq7DAAAAABQC0LbKvW0tcUj672v3sMAAAAAABqM9ggAAAAAACWi0rZKbTNnxmZXX14s/3qXj0f3iBH1HhIAAAAA0ACEtlVqnzkz9v7mMcXyHTvsIrQFAAAAAGpCewQAAAAAgBIR2gIAAAAAlIjQFgAAAACgRPS0jYjN77wuZk6bOqj7tHV19S7vcNNl0d3REcPBNdfP+Xen8RPqPRQAAAAAYAAqbQEAAAAASkRoCwAAAABQItojVGl2W1v8dp9P9C4DAAAAADRUpe1zzz0X11//n4arw0BPW1v8/V0rF5dcBgAAAABoqND2tNNOi9tuu63ewwAAAAAAqKvStEfo6emJ4aSluzuW+/2DxfJTa6+l2hYAAAAAqH9o+9e//jW22GKL+PKXvxwXXXRRfPjDH44NNtggzjjjjHj66afjne98Zxx66KGx/vrrF7d/5JFH4phjjomHH344xo4dGx/72Mfii1/8Ypx11llxzTXXFLe555574pZbbompU6fG8ccfHzfffHOMGjUqttpqqzjkkENiscUWK2734IMPxje/+c344x//GMsss0wxhu2226743W9+85s4+eST48knnyyee/nll4/p06fHSSedNOB6ZF482My4dVZ3rPM//2/Odlhz9ZjdOrxC2+7u7noPARb5/m6/h8ZlnkNzMNehOZjr0PiaeZ53L+A616TS9v7774+rr746Ojs74xOf+EQce+yxsdZaaxXtDj7zmc/ET3/60yI4zQB3nXXWiVNPPTWeeOKJImhdc801Y999943JkycXj3X00UcX/x5xxBExc+bMuOyyy2LGjBnxjW98I4477rg48cQTi/63eZ8ddtghTjjhhJg4cWKMHz8+VlpppRg9enTsv//+xWXrrbeOn/3sZ3HeeefFRz7ykXmOf3rntHh56guDWuf2rpm9yy9OnRqzOkbEcJLbDJrNpEmT6j0EYIiZ59AczHVoDuY6ND7zfIhD27333jve9ra3FZWwu+22W1Fxm/baa6+49957i+D161//elF9m5W5b33rW2O55ZaLH/7wh7HssssWQWulgvYNb3hD/OUvf4lf/epXRdXtmDFjiuuz6jaD18MOOyx+8YtfxJJLLhlHHnlktLa2xtvf/vZ44YUX4uWXX47rrruuCIy/8IUvFPc78MAD47e//e18xz961BLRMXv2oNa5raurd3nM2LHR3dERw8m4cePqPQRYpN9i5R+C/JKoTSsTaEjmOTQHcx2ag7kOja+Z53lnZ2c89thjiya0zRA2ZbXs9ddfH1dccUXv77JadqONNiqWP/e5z8Xpp59e/H7TTTeNHXfcMd74xje+6vHycWbPnh2bbLLJXNfnddnyIKt0V1tttSKwrfjUpz5V/JtVtfmC9w8oM9Sdl5aWOZfB6Hv7au5fb802IaCy39v3obGZ59AczHVoDuY6NL5mnOdtC7i+NQltR44c2ZuSZzuE/q0IKlW0n/3sZ2ObbbYpqmizb21W6GYF7Uc/+tG5bp+PkxW22XKhv//6r/+K9vb2+a54/5OaDbeTnAEAAAAAzeuVUtUaWHHFFYuTk2X/2solq2pvv/323r60HR0dRVXsJZdcUrRSuPHGG4v7tvQpVc3HefHFF4vrKo+TrQ9OOeWU6OrqihVWWCEeffTRucLYgw46KC644ILi5Gd/+MMf5hpX/58BAAAAAJoitN1nn32KnrI/+tGPir60F110UXHJkDWrcfOEZVlZ++c//7noW3HfffcVbQ7S4osvXvS8/fvf/16cUGzjjTeOr33ta/Hggw8WoWv2ss2eD2PHji165j7//PNFiDtlypT4yU9+EjfffHNsuOGGRRCcJ9n63ve+V7RROP/884vn6RsKAwAAAAA0RWibvWMzSP3xj38c2267bVx55ZXxrW99K9Zbb73i92eccUa89NJLseuuu8anP/3pWHfddXtPGJb9bTNk3WGHHYoK2nycPElZBsFZmZvVt9kPN2Vw+93vfrcIY7fffvv4/ve/XzzPqquuWvTXPfPMM4vWChnu/v73vy9OfjZixIharmrMbmuLuz/x0eKSywAAAAAAtbBQPW0zVM02BX1tt912xWUg2ebgwgsvHPB37373u+M3v/lN789veMMbekPagay99tpx1VVXver6PPvaMsss09t2odJLd6ATni2Mnra2eGat1Wv6mAAAAAAANa20LYNsy5CVuXfeeWfRbiGD3bvuuis++MEP1ntoAAAAAABDW2lbRltuuWU8/vjjccQRR8Rzzz1XtFXItgzvete75nmf25faMJ4bPbiet63ds+I9999aLN//nk1jdtvw2JQX7jOnVQUAAAAAUE7DI2kcpP3337+4DKX2WTNj/3MPn/N8598WXcMktAUAAAAAyq3h2iMAAAAAAAxnQlsAAAAAgBIR2gIAAAAAlIjQFgAAAACgRIS2AAAAAAAlIrQFAAAAACiR9noPYLjqbhsRP/j00b3LAAAAAAC1ILStUnd7e9y50fb1HgYAAAAA0GC0RwAAAAAAKBGVtlVq7Z4Vazz0v8XyQ2u8L2a32ZQAAAAAwMKTNFapfdbMOPDbXy2W9z//tugS2gIAAAAANaA9AgAAAABAiQhtAQAAAABKRGgLAAAAAFAiQlsAAAAAgBJx9qyIOGq7VWPMmDGDu9P06RGfn7N43ifXiRg9ekjGBgAAAAA0F5W2AAAAAAAlotK2Wh0dEWef/coyAAAAAEANCG2rNWJExAEH1HsUAAAAAECD0R4BAAAAAKBEVNpWq7s74o475ixvvHFEW1u9RwQAAAAANAChbbVefjlis83mLE+bFjF6dL1HBAAAAAA0AO0RAAAAAABKRGgLAAAAAFAiQlsAAAAAgBIR2gIAAAAAlIjQFgAAAACgRIS2AAAAAAAl0l7vAZTBhMnPxLOtIwZ1n7aZXbHVV8YXyzc+8lR0j+iI4eiStd5e7yEAAAAAAH0IbauUIe11+3y23sMAAAAAABqM9ggAAAAAACWi0rZKLd3dscLDfyiWp6y6evS0tdV7SAAAAABAAxDaVqljxow4bo+diuX97poUM0aNqveQAAAAAIAGoD0CAAAAAECJCG0BAAAAAEpEaAsAAAAAUCJCWwAAAACAEhHaAgAAAACUiNAWAAAAAKBE2us9gOFq1oj2+Mnnv9y7DAAAAABQC9LGKnWP6Ihr9j+w3sMAAAAAABqM9ggAAAAAACWi0rZKLbNnx1v+/Kdi+Zm3vyN6WuXfAAAAAMDCE9pWqePll+OkXbYplve7a1LMGDWq3kMCAAAAABqA8lAAAAAAgBJRaRsRm995XcycNnVQ92nr6upd3uGmy6K7oyOGo2uuH/x9dho/YSiGAgAAAACotAUAAAAAKBehLQAAAABAiQhtAQAAAACGa2j78MMPx/3331/zQTz11FNx2223Fct//etfY5VVVin+BQAAAABoNoMKbQ844ICYMmVKzQdx+OGHx4MPPhjDyezW1nh8k/cXl1wGAAAAAKiF9po8ShPqaW+Ph7b9UL2HAQAAAAA0mAUuEd1zzz3j6aefjsMOOyw233zz4jJhwoRYZ5114nvf+15xm8svv7y4fu211y5u/+ijj/be/6677oodd9wx1lxzzdhiiy2K26avf/3rcc8998TZZ59d3KfihhtuiE022STe8573xNFHHx1dXV3F9T/5yU9i9913j9NOO614nk033TSuuuqq3vs98sgj8fGPfzze/e53x8Ybb1w8LgAAAABAw1XannXWWUXouu+++8Zb3/rWolVCBqkZoo4YMSJuueWWIiA9/vjjY8UVV4xrr7029tprr/jlL38ZSyyxRBx00EGxzz77xIc//OGiL+748eNj3XXXjSOOOKJouZAB7Oc+97mYNm1a8XxXXnllnHHGGdHd3R2HHnpofPe7340vfelLxe8mTZoUo0aNiiuuuKJoq3DMMcfEm9/85thoo42K22aQfOqpp8YTTzwRX/7yl4ug+AMf+MA8162nZ85lUGbPjlEvvFAsdi65ZEQTtUjI1wSG4z5r34XGZZ5DczDXoTmY69D4mnmedy/gOi9waPu6170u2traYsyYMcUl7bfffrH88ssXy1/72teK0HWzzTYrfs6Q9vbbb4+f/vSnRVD7/PPPx9JLLx3LLrtscXnTm94Ub3zjG4vHytA3Q9h8jkpom31uM3xNBx54YFFZWwltW1pa4pRTTomllloqVl555bj33nuLkDdD26wGzkreDJaXW265+OEPf1g83/xM75wWL0+dE8AuqPaumbHzt+ZU8f73wV+MWR0jollMnDix3kOAquQXPkBjM8+hOZjr0BzMdWh85vkQ9bTtG4ZOnjy5qG49/fTTe6+bMWNGUUWbYWy2NDjyyCPj3HPPLYLdXXbZJZbMCtV5WGuttXqXV1tttfjnP/8ZL/ynsjWD4gxsK9ZYY43edgsZHOcYsgo3WydkdXCGw/MzetQS0TF79qDWve0/7RrSmLFjo7ujI5rFuHHj6j0EGPS3WPmHIKvu88snoPGY59AczHVoDuY6NL5mnuednZ3x2GOPDW1oO3LkyLk2dlbHbrDBBnPdJlsjpGxhsMcee8SvfvWr4pKhaga482pb0Nqn3UDPf3oXZEVuMej2uYedz125/Wc/+9nYZpttiufIlg1777130bLhox/96DzXo6VlzmUw+t6+mvsPZ802mWisfdf+C43NPIfmYK5DczDXofE14zxvW8D1rVkj1uxj+7e//a2ogq1czj///OJQ+meffTaOPfbY4rr9998/rr766njf+95XhKrz0jdxzr61yyyzTNFCIT355JMxffr03t8/9NBDRZuErOz9xje+ER0dHfGpT30qLrnkkthtt93ixhtvrNVqAgAAAAAMqUGFthma/vnPf+5tU9BXhqQXX3xxcQKyv/zlL0WrhOuvvz5WWmmlog3CTTfdFCeeeGLxu+xB+8gjjxRtDyqPm20Unnvuud7Hy+rYBx54IO68884488wzi5OY9S0jnjBhQtGSIXvZ3nDDDfGJT3yiqPzNk5zlfXOcWWZ933339T4PAAAAAEDZDao9QvalzROCZVDa37bbblv0nc2ANf99xzveEeedd16ssMIKxe+zFUKGtjvssEOMHj06dt11196WBflvtlbIE5udddZZvc+VVbkzZ84sqmWzzUHFm9/85qJPbT5G/psBceWkZWeccUYcd9xxxe+yjcLWW28dX/jCFxZuKwEAAAAAlDG0zZ60eZmXvfbaq7jM68RilZOF9bflllsWl4pHH320+DerZweS/WvHjx9fXPrLFgwXXnjha64LAAAAAEAZLdSJyJpZT2tr/Pl96/UuAwAAAADUgtC2SrPb2+OBj2xX72EAAAAAAA1m2IW2O++8c3GppduX2jCeG90SzejCfeZUCwMAAAAA5TDsQtvS6OmJJV58vlicNuZ1ES3NGfoCAAAAALUltK1SR9fL8Z0DtyqW9z//tugauXi9hwQAAAAANABn0AIAAAAAKBGhLQAAAABAiQhtAQAAAABKRGgLAAAAAFAiQlsAAAAAgBIR2gIAAAAAlEh7vQcwXM1ubYs7N9yudxkAAAAAoBaEtlWaNaIjfrDfhHoPAwAAAABoMNojAAAAAACUiErbavX0REfXy8ViV8diES0t9R4RAAAAANAAVNpWKQPb8z7/geJSCW8BAAAAABaW0BYAAAAAoESEtgAAAAAAJSK0BQAAAAAoEScii4ijtls1xowZM7g7TZ8e8fk5i+d9cp2I0aOHZGwAAAAAQHNRaQsAAAAAUCJCWwAAAACAEtEeoVptbRG77vrKMgAAAABADQhtq7XYYhFXXVXvUQAAAAAADUZ7BAAAAACAEhHaAgAAAACUiNC2WtOn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bQEAAAAASkRoCwAAAABQIkJbAAAAAIASEdoCAAAAAJRIe70HMFzNGtEel31lfO8yAAAAAEAtSBur1D2iI67b57P1HgYAAAAA0GC0RwAAAAAAKBGVtlVq6e6OFR7+Q7E8ZdXVo6etrd5DAgAAAAAagNC2Sh0zZsRxe+xULO9316SYMWpUvYcEAAAAADQA7REAAAAAAEpEaAsAAAAAUCJCWwAAAACAEhHaAgAAAACUiNAWAAAAAKBE2us9gDLY/M7rYua0qYO6T1tXV+/yDjddFt0dHUMwMqAWenoipk59IcaOXTJaWqJp7TR+Qr2HAAAAACwAoW2VZre2xsNbfKB3GQAAAACgFoS2Veppb49HPrhZvYcBAAAAADQYJaIAAAAAACVSitD27rvvjlVWWSWGldmzY8zf/1FcchkAAAAAoGFC2+Gobdas2PKMc4tLLgMAAAAA1ILQFgAAAACgmUPbH/3oR7HZZpvFmmuuGTvvvHPcd999r7rN3/72tzjwwANj/fXXj/e+973xjW98I7q6uorf/eQnP4ndd989TjvttFh77bVj0003jauuuqr3vj09PXHOOefERhttFOuuu258/vOfj2eeeWaRriMAAAAAQLXaYxH64x//GKecckqcffbZ8Y53vKMIcA866KA49dRTe2+T4ezee+8dyy+/fFxyySXxr3/9K4466qjid0ceeWTx76RJk2LUqFFxxRVXxIMPPhjHHHNMvPnNby6C2v/+7/+On/3sZ/Gtb30rll566fjBD34Q++67b3HdiBEjBhxXT8+cy2D0vX019wcWnfwy55V/W6JZdXd313sIMOT7t/0cGpu5Ds3BXIfG18zzvHsB13mRhrZPP/10tLS0xFve8pZYdtlli8A2q24rgUq644474u9//3tceeWVseSSSxbXHX300bH//vvHV77yleLnfIwMf5daaqlYeeWV49577y1un6HtBRdcEBMmTCgqdNNxxx1XXJ+Pu/nmmw84rumd0+LlqS8Mal3au2b2Lr84dWrM6hg4EAbK48UXp0YzmzhxYr2HAEMuv9gFGp+5Ds3BXIfGZ56XJLTN8DRD1g9/+MOx2mqrxRZbbBEf/ehHY8qUKb23mTx5cqywwgq9gW16z3veE7NmzYq//OUvxc9ZhZuBbcUaa6wRl19+eUyfPr1orZDhbmvrK50fXn755bmeo7/Ro5aIjtmzB7Uubf9p15DGjB0b3R0dg7o/sOjkF0MZ2I4ZM7b40qdZjRs3rt5DgCH9tjr/w5ftl9ra2uo9HGCImOvQHMx1aHzNPM87OzvjscceK1dou/jiixf9Z++555749a9/XfSnveyyy2L8+PG9txk5cuRrlky3t8897Lw+Q9rK77/zne/EiiuuONdt+obA/WWGM9gcp+/tq7k/sCjNmaAZ2DbzXG22P4Q0735uX4fGZ65DczDXofE14zxvW8D1XaQnIvv9738f3/3ud+N973tfHHbYYXHDDTfEjBkz5gphM2zNqtjnn39+rkN68zZve9vbip+ffPLJoqq24qGHHioqeMeOHVtU4D777LNFNW5estdt9sx94oknarous1tb4/FN3l9cchkAAAAAoBYWaaXtYostFuecc05xgrANNtig6EWbJcF9A9oNN9wwlltuuTj00EPj4IMPjn//+99x/PHHx/bbb1+Esinvk31rs8/t7373uyL8vfjii4vf7bPPPvHtb3+7CG/f/va3x7nnnhv3339/nHDCCTVdl5729nho2w/V9DEBAAAAABZpaLvqqqsW4WkGqXmCsDwhWVbBZojbt0Q4f59B7W677RajR48ueuB+9atf7b1NVs++8Y1vjF133bX4Nx9jnXXWKX736U9/uqjCzZOXTZs2reh3e+GFF863PQIAAAAAQFOGtmnHHXcsLv09+uijvctZafu9731vno+R/WuzD27fXrh9Q988EVlehtTs2THq+ReKxc7XLZmDGtrnAwAAAACagqSxSm2zZsVWp3ynuOQyAAAAAEAtCG0BAAAAAJq5PcLC2nnnnYtLLd2+1Ibx3OiWQd2nY8ZLsUOcWCxf/6atomvk4jUdE1A7PT098cLiU2PJsWOjpWVwc72R/Pyie6ORXLjPevUeAgAAAAwJlbYAAAAAACUitAUAAAAAKBGhLQAAAABAiQhtAQAAAABKZNidiKwsZre2xS2b79q7DAAAAABQC0LbKs0a0RGX7nlovYcBAAAAADQY7REAAAAAAEpEpW21enpiiRefLxanjXldREtLvUcEAAAAADQAoW2VOrpeju8cuFWxvP/5t0XXyMXrPSQAAAAAoAFojwAAAAAAUCJCWwAAAACAEhHaAgAAAACUiNAWAAAAAKBEhLYAAAAAACUitAUAAAAAKJH2eg9guJrd2hZ3brhd7zIA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4tnWEYO/4813z/l38t9rPiagdnp6emJqZ2uMfWhKtLS01Hs4wBBo9nl+yVpvr/cQAACAGtIeAQAAAACgRIS2AAAAAAAlIrSt0oiXX47DP/2J4pLLAAAAAAC1oKdtlVpnz45V77u7dxkAAAAAoBZU2gIAAAAAlIjQFgAAAACgRIS2AAAAAAAlIrQFAAAAACgRoS0AAAAAQIm013sAw9mMxRav9xAAAAAAgAYjtK3SjFGjYr+7H6r3MAAAAACABqM9AgAAAABAiQhtAQAAAABKRGhbpREzZsTBX/x0ccllAAAAAIBa0NO2Sq3d3THujlt7lwEAAAAAakGlLQAAAABAiai0jYjN77wuZk6bOqj7tHV19S7vcNNl0d3RMQQjA2qhpydi6tQXYuzYJaOlpd6jAYZCs8/za64f+ufYafyEoX8SAACgoNIWAAAAAKBEhLYAAAAAACUitAUAAAAAaKTQ9uGHH477778/7r777lhllVWqfpw999wzzjrrrIUdTjGGHAsAAAAAQFOeiOyAAw6IL37xi/HWt741mkmeeOyak46p9zAAAAAAgAajPQIAAAAAQKOEttnS4Omnn47DDjusuKTLLrssNt5441h77bWL67q6uorre3p64vzzz4/NN9881lhjjdhoo43i7LPPHvBx8z7f/OY3i8dZffXVi/tcccUVvb/v7OyMo48+Ot773vcWl6OOOipmzJjR+/v77rsvPvzhD8eaa64Zn/zkJ4sxAgAAAAA0fHuE7EG74447xr777lu0R8hWCTfeeGNceOGF8eyzzxZtE9Zaa63Yfffd49prr42LL744Tj/99FhuueXijjvuiGOOOSY222yzIpjt63vf+17ceuutxeMvtdRScc0118Txxx8fW2yxRSy99NJx5JFHxqOPPhrnnntuLLbYYnHIIYfEt7/97Rg/fnxx/6uuuipOPvnkeN3rXhdf+9rX4rTTToszzjhjnuvR0zPnMhitM2fGuldeUyzft9tOMXvEiGo2IbAI5JdGr/zbUu/hAEPAPB963d3d9R4C9O6H9kdobOY6NL5mnufdC7jOCxXaZija1tYWY8aMKS5pwoQJseKKK8bKK68c73//++ORRx4prn/zm99cVM9usMEGxc8Z5J5zzjnx+OOPvyq0fde73hXve9/7Yty4ccXPn//854vbTpkyJUaMGBE33HBD/PCHP4x1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DxtALimwUUWOdyhWrJg76LQWK9q5c6cNGTLEVq9e7Y71j54WNQGQv1SpUsUuuugi97f7u+++s88//9z9/b766quZ60AU0QevBQsWtIcffth9SPPxxx/bc889Z507d2auA1HoaO/NO3To4D6c0eU//vij204f4tSvX99iUVym97FVjNEve4W2H3zwgSUlJdmNN95oXbt2DfewAARJv9TV9y4733//vfsEv2/fvrZs2TIX7mglywYNGvzt4wQQWr1793bHjz/+uDvWP31aqEwf5FSvXt0GDRrkvmYJIP/ZtWuXa3s0d+5cV3Shlai7d+9ucXFxzHUginiBrOZ1qVKl7Nprr7Xrr7+euQ5ECc3dl19+2Re8Hu29uXpcDx061DZt2uRaoOl/AfW4jkUxG9oCAAAAAAAAQCSKyfYIAAAAAAAAABCpCG0BAAAAAAAAIIIQ2gIAAAAAAABABCG0BQAAAAAAAIAIQmgLAAAAAAAAABGE0BYAAAAAAAAAIgihLQAAAAAAAABEEEJbAAAAAAAAAIgghLYAAAD4W40ePdqqV6+e548zZcoUa9q0abbX/ec//7HWrVtb7dq1rWXLlvb2229nu937779v11xzjUUKPW96/kKtV69e9sILL4T8fgEAABAcQlsAAABEnZkzZ9rjjz+eYxB7//33W8OGDe3ZZ5+1f/zjH9a7d293G39bt261QYMGWd++fS3a3XfffS60XbNmTbiHAgAAADNLCPcAAAAAgFBR0PrMM8/Y9OnTrWTJktluM2LECGvRooX16dPHnW/cuLHt2LHD3U7Vt55x48a5StyaNWtatDvppJOsTZs2Nnz4cHvuuefCPRwAAICYR6UtAAAAwm7WrFl2+eWX2znnnOMqYPv37++CVH+ffvqp20ZBavPmzV2Lg4svvjigXYACx/nz57vLmjRpctjj/Pzzz7Zu3Tp3O3+6v/Xr17vrZNu2bfbmm2+6INOzcOFC155A93/ttde6cVxyySX26quvHnHfvvrqK3e7Tz75JODyb7/91l0+d+5c39jUpqBRo0YuKL7gggvc+T/++CPb+33rrbfc7XU7f2oJocphT0ZGho0fP97t89lnn+32Va0jsmrbtq17jn/44Ycj7g8AAADyHqEtAAAAwmrs2LF27733WkpKio0aNcq6d+/uWhh07tzZ9u3b57b58ssv7Y477rCTTz7Z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",
      "text/plain": [
       "<Figure size 1400x1000 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "import pandas as pd\n",
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "import seaborn as sns\n",
    "from sklearn.feature_selection import f_classif, mutual_info_classif, chi2, SelectKBest\n",
    "from scipy.stats import pearsonr\n",
    "\n",
    "# Set style (using compatible style name for newer matplotlib versions)\n",
    "try:\n",
    "    plt.style.use('seaborn-whitegrid')  # for older matplotlib versions\n",
    "except:\n",
    "    plt.style.use('seaborn-v0_8-whitegrid')  # for newer matplotlib versions\n",
    "sns.set_palette('viridis')\n",
    "\n",
    "\n",
    "\n",
    "# Function to get F-scores and p-values from different algorithms\n",
    "def get_feature_scores():\n",
    "    # Dictionary to store results\n",
    "    results = {}\n",
    "    \n",
    "    # 1. ANOVA F-test (f_classif)\n",
    "    f_values, p_values = f_classif(x, y)\n",
    "    results['ANOVA'] = {'F_Score': f_values, 'P_Value': p_values}\n",
    "    \n",
    "    # 2. Mutual Information\n",
    "    mi_values = mutual_info_classif(x, y, random_state=42)\n",
    "    # MI doesn't produce p-values, so we'll use NaN\n",
    "    results['Mutual Info'] = {'F_Score': mi_values, 'P_Value': np.full(len(mi_values), np.nan)}\n",
    "    \n",
    "    # 3. Chi-Square (requires non-negative features)\n",
    "    try:\n",
    "        chi2_values, chi2_p_values = chi2(x, y)\n",
    "        results['Chi-Square'] = {'F_Score': chi2_values, 'P_Value': chi2_p_values}\n",
    "    except ValueError:\n",
    "        # If chi2 fails due to negative values\n",
    "        print(\"Chi-Square test couldn't be performed due to negative values.\")\n",
    "    \n",
    "    # 4. Correlation (Pearson)\n",
    "    pearson_scores = []\n",
    "    pearson_p_values = []\n",
    "    \n",
    "    for col in x.columns:\n",
    "        score, p_value = pearsonr(x[col], y)\n",
    "        pearson_scores.append(abs(score))  # Using absolute correlation\n",
    "        pearson_p_values.append(p_value)\n",
    "    \n",
    "    results['Pearson'] = {'F_Score': np.array(pearson_scores), 'P_Value': np.array(pearson_p_values)}\n",
    "    \n",
    "    return results, x.columns\n",
    "\n",
    "# Get scores from different algorithms\n",
    "all_scores, feature_names = get_feature_scores()\n",
    "\n",
    "# Create function to plot F-scores from different algorithms\n",
    "def plot_f_scores():\n",
    "    plt.figure(figsize=(14, 10))\n",
    "    \n",
    "    # Number of features and algorithms\n",
    "    n_features = len(feature_names)\n",
    "    n_algorithms = len(all_scores)\n",
    "    \n",
    "    # Set width of bars\n",
    "    bar_width = 0.8 / n_algorithms\n",
    "    \n",
    "    # Colors for different algorithms\n",
    "    colors = plt.cm.tab10(np.linspace(0, 1, n_algorithms))\n",
    "    \n",
    "    # Initialize position for bars\n",
    "    positions = np.arange(n_features)\n",
    "    \n",
    "    # Initialize for legend\n",
    "    bars = []\n",
    "    labels = []\n",
    "    \n",
    "    # Create DataFrame to normalize scores for fair comparison\n",
    "    normalized_scores = {}\n",
    "    \n",
    "    for algo, values in all_scores.items():\n",
    "        # Normalize scores to 0-1 range for each algorithm\n",
    "        max_score = np.max(values['F_Score'])\n",
    "        if max_score > 0:  # Avoid division by zero\n",
    "            normalized_scores[algo] = values['F_Score'] / max_score\n",
    "        else:\n",
    "            normalized_scores[algo] = values['F_Score']\n",
    "    \n",
    "    # Create bars for each algorithm\n",
    "    for i, (algo, values) in enumerate(all_scores.items()):\n",
    "        # Sort feature indices by score\n",
    "        sorted_indices = np.argsort(values['F_Score'])[::-1]\n",
    "        sorted_features = [feature_names[i] for i in sorted_indices]\n",
    "        sorted_scores = normalized_scores[algo][sorted_indices]\n",
    "        \n",
    "        # Plot bars\n",
    "        x_pos = positions - 0.4 + (i + 0.5) * bar_width\n",
    "        bar = plt.barh(x_pos, sorted_scores, height=bar_width, color=colors[i], alpha=0.7)\n",
    "        \n",
    "        # For legend\n",
    "        bars.append(bar[0])\n",
    "        labels.append(algo)\n",
    "    \n",
    "    # Set y-ticks at the middle of each feature group\n",
    "    plt.yticks(positions, sorted_features)\n",
    "    \n",
    "    plt.xlabel('Normalized Feature Importance Score', fontsize=12)\n",
    "    plt.title('Feature Importance Scores from Different Algorithms', fontsize=14)\n",
    "    plt.legend(bars, labels, loc='lower right', fontsize=10)\n",
    "    plt.tight_layout()\n",
    "    plt.show()\n",
    "\n",
    "# Create function to plot p-values from different algorithms\n",
    "def plot_p_values():\n",
    "    # Filter algorithms that have p-values\n",
    "    p_value_algos = {k: v for k, v in all_scores.items() if not np.isnan(v['P_Value']).all()}\n",
    "    \n",
    "    if not p_value_algos:\n",
    "        print(\"No p-values available to plot.\")\n",
    "        return\n",
    "    \n",
    "    plt.figure(figsize=(14, 10))\n",
    "    \n",
    "    # Number of features and algorithms\n",
    "    n_features = len(feature_names)\n",
    "    n_algorithms = len(p_value_algos)\n",
    "    \n",
    "    # Set width of bars\n",
    "    bar_width = 0.8 / n_algorithms\n",
    "    \n",
    "    # Colors for different algorithms\n",
    "    colors = plt.cm.tab10(np.linspace(0, 1, n_algorithms))\n",
    "    \n",
    "    # Initialize position for bars\n",
    "    positions = np.arange(n_features)\n",
    "    \n",
    "    # Initialize for legend\n",
    "    bars = []\n",
    "    labels = []\n",
    "    \n",
    "    # Create bars for each algorithm\n",
    "    for i, (algo, values) in enumerate(p_value_algos.items()):\n",
    "        # Negative log transform to make smaller p-values have taller bars\n",
    "        # Add small epsilon to avoid log(0)\n",
    "        log_p_values = -np.log10(values['P_Value'] + 1e-100)\n",
    "        \n",
    "        # Sort feature indices by transformed p-value (higher is more significant)\n",
    "        sorted_indices = np.argsort(log_p_values)[::-1]\n",
    "        sorted_features = [feature_names[i] for i in sorted_indices]\n",
    "        sorted_log_p = log_p_values[sorted_indices]\n",
    "        \n",
    "        # Plot bars\n",
    "        x_pos = positions - 0.4 + (i + 0.5) * bar_width\n",
    "        bar = plt.barh(x_pos, sorted_log_p, height=bar_width, color=colors[i], alpha=0.7)\n",
    "        \n",
    "        # For legend\n",
    "        bars.append(bar[0])\n",
    "        labels.append(algo)\n",
    "    \n",
    "    # Set y-ticks at the middle of each feature group\n",
    "    plt.yticks(positions, sorted_features)\n",
    "    \n",
    "    # Add a line at -log10(0.05) to show significance threshold\n",
    "    plt.axvline(x=-np.log10(0.05), color='red', linestyle='--', \n",
    "                label='p=0.05 significance threshold')\n",
    "    \n",
    "    plt.xlabel('-log10(p-value)', fontsize=12)\n",
    "    plt.title('Statistical Significance (-log10 p-value) from Different Algorithms', fontsize=14)\n",
    "    plt.legend(loc='lower right', fontsize=10)\n",
    "    plt.tight_layout()\n",
    "    plt.show()\n",
    "\n",
    "# Call the plotting functions\n",
    "plot_f_scores()\n",
    "plot_p_values()"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.11.9"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
